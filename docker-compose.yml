version: '3.8'

services:
  zookeeper:
    build:
      context: ./docker/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - kafka-net

  kafka:
    build:
      context: ./docker/kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      - zookeeper
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD-SHELL", "nc -z kafka 9092 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  kafka-init:
    build:
      context: ./docker/kafka
    container_name: kafka-init
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - kafka-net
    command: >
      bash -c "
        echo 'Waiting for Kafka...' &&
        sleep 10 &&
        kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic amazon-reviews1 --partitions 3 --replication-factor 1 &&
        kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic sentiment-results --partitions 3 --replication-factor 1 &&
        echo 'Kafka topics created.'"

  mongodb:
    build:
      context: ./docker/mongodb
    container_name: mongodb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - kafka-net
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  spark-master:
    build:
      context: ./docker/spark
    container_name: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - kafka-net
    volumes:
      - ./spark-master/data:/opt/spark-data
      - ./kafka/consumer:/app/consumer
      - ./model:/app/model

  spark-worker-1:
    build:
      context: ./docker/spark
    container_name: spark-worker-1
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - kafka-net
    volumes:
      - ./spark-master/data:/opt/spark-data
      - ./model:/app/model

  spark-worker-2:
    build:
      context: ./docker/spark
    container_name: spark-worker-2
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    depends_on:
      - spark-master
    networks:
      - kafka-net
    volumes:
      - ./spark-master/data:/opt/spark-data
      - ./model:/app/model


  producer:
    build:
      context: ./kafka/producer
    container_name: kafka-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: amazon-reviews1
    networks:
      - kafka-net
    volumes:
      - ./data:/app/data


  backend:
    build: ./backend
    container_name: flask-backend
    ports:
      - "5000:5000"
    depends_on:
      - mongodb
    networks:
      - kafka-net


volumes:
  mongo_data:

networks:
  kafka-net:
    driver: bridge
